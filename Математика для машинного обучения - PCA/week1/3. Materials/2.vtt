WEBVTT

1
00:00:01.570 --> 00:00:05.915
Мы видели, что смещение и масштабирование набора данных делает в среднем.

2
00:00:05.915 --> 00:00:08.870
Теперь давайте посмотрим на влияние дисперсии.

3
00:00:08.870 --> 00:00:12.260
Помните, что дисперсия является мерой распространения данных.

4
00:00:12.260 --> 00:00:14.930
Что мы ожидаем, когда набор данных будет смещен?

5
00:00:14.930 --> 00:00:17.355
Давайте посмотрим на этот набор данных здесь.

6
00:00:17.355 --> 00:00:20.295
У нас есть три точки данных, заданные в минус один,

7
00:00:20.295 --> 00:00:22.415
плюс два, и плюс три.

8
00:00:22.415 --> 00:00:26.220
А теперь мы смещаем набор данных вправо.

9
00:00:26.220 --> 00:00:30.490
Дисперсия набора данных обозначается синей полоской внизу.

10
00:00:30.490 --> 00:00:34.805
Сдвиженный набор данных теперь задается красными точками,

11
00:00:34.805 --> 00:00:37.795
и мы сдвигаем каждую отдельную точку данных на две.

12
00:00:37.795 --> 00:00:40.975
Итак, вопрос в том, что происходит с дисперсией?

13
00:00:40.975 --> 00:00:43.820
Ну, сдвиг данных на самом деле не

14
00:00:43.820 --> 00:00:47.040
влияет на соотношение точек данных между собой.

15
00:00:47.040 --> 00:00:49.010
Поэтому дисперсия не меняется.

16
00:00:49.010 --> 00:00:50.265
Дисперсия идентична.

17
00:00:50.265 --> 00:00:54.248
Таким образом, дисперсия синего набора данных идентична дисперсии красного набора данных.

18
00:00:54.248 --> 00:01:01.890
Таким образом, общий результат заключается в том, что если у нас есть дисперсия D,

19
00:01:01.890 --> 00:01:09.100
это точно так же, как дисперсия всех наборов данных D плюс A,

20
00:01:09.100 --> 00:01:14.050
где A является смещение применяется к каждому отдельному элементу

21
00:01:14.050 --> 00:01:19.660
D. Давайте теперь масштабируем набор данных и посмотрим, какое влияние это оказывает на дисперсию данных.

22
00:01:19.660 --> 00:01:22.435
Итак, мы собираемся взять точно такой же набор данных, как и раньше.

23
00:01:22.435 --> 00:01:24.840
Дисперсия обозначается синей полоской,

24
00:01:24.840 --> 00:01:28.180
и мы собираемся масштабировать каждую отдельную точку данных на два.

25
00:01:28.180 --> 00:01:32.005
Итак, вопрос в том, что такое дисперсия двух раз D?

26
00:01:32.005 --> 00:01:35.830
Таким образом, новый набор данных, как указано этими красными точками.

27
00:01:35.830 --> 00:01:37.030
Помните, что дисперсия — это

28
00:01:37.030 --> 00:01:40.455
среднее квадратное расстояние точек данных от среднего.

29
00:01:40.455 --> 00:01:43.210
Если мы масштабируем набор данных в два раза,

30
00:01:43.210 --> 00:01:46.455
расстояние каждой точки данных до среднего масштабируется на два,

31
00:01:46.455 --> 00:01:50.055
но квадратное расстояние масштабируется на четыре.

32
00:01:50.055 --> 00:01:55.420
И поэтому дисперсия в четыре раза больше, чем раньше.

33
00:01:55.420 --> 00:02:00.960
И наш следующий результат заключается в том, что дисперсия

34
00:02:00.960 --> 00:02:08.685
альфа-раз D равна альфа-квадрату, умноженному на дисперсию D,

35
00:02:08.685 --> 00:02:16.090
где альфа - вещественное число, которое масштабирует каждый отдельный элемент в наборе данных D. Теперь

36
00:02:16.090 --> 00:02:18.405
давайте посмотрим на проблемы с высокой размерностью.

37
00:02:18.405 --> 00:02:20.980
Предположим, что у нас есть набор данных D,

38
00:02:20.980 --> 00:02:26.215
который представляет собой набор данных точек x_1 до x_n,

39
00:02:26.215 --> 00:02:30.845
и X_i живут в R^P.

40
00:02:30.845 --> 00:02:36.110
Помните, дисперсия этого набора данных задается матрицей ковариации.

41
00:02:36.110 --> 00:02:39.160
Если вы выполняете линейное преобразование каждой точки данных,

42
00:02:39.160 --> 00:02:42.835
скажем Ax_I плюс B,

43
00:02:42.835 --> 00:02:44.245
для заданной матрицы A

44
00:02:44.245 --> 00:02:45.574
и вектора смещения B,

45
00:02:45.574 --> 00:02:47.680
вопрос в том, что произойдет с

46
00:02:47.680 --> 00:02:51.505
нашим набором данных, если мы сделаем это с каждой точкой данных?

47
00:02:51.505 --> 00:02:56.209
Ну, мы получаем матрицу ковариации преобразованного набора данных следующим образом.

48
00:02:56.209 --> 00:03:03.035
Мы получаем, что дисперсия A раз D плюс

49
00:03:03.035 --> 00:03:12.905
B является A раз дисперсия D раз A транспонирование.

50
00:03:12.905 --> 00:03:14.330
В этом видео мы видели,

51
00:03:14.330 --> 00:03:19.160
какое влияние оказывает линейное преобразование набора данных на среднее значение и дисперсию.

52
00:03:19.160 --> 00:03:21.800
В частности, мы увидели, что смещение данных

53
00:03:21.800 --> 00:03:24.323
влияет только на среднее значение, но не на дисперсию, в

54
00:03:24.323 --> 00:03:28.440
то время как масштабирование данных влияет как на среднее, так и на дисперсию.